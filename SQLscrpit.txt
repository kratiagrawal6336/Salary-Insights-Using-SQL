--1 Add the data by month for a period of 2 years

/*
The 1st task was completed in the following manner:

a. A employee table "EmployeeData" with 50 records and salary table "SalaryData2" with 1800 records 
(records for 50 employess for a period of 2 years i.e., 1/01/2012 to 1/12/2014) was cretaed in excel.

b. "dataInsert.py" file is used to create employee and salary table in test_data.db database 
(the test_data.db is the new database I had created in sqlite).

c. Refer to "Readme.txt" file for the code executed in python
*/



--2 Get the Average Salary per month

--the strftime() is converting the 'yy-mm-dd' format into 'yy-mm'

SELECT strftime('%Y-%m', disbursement_date) AS month, 
       AVG(salary) AS average_salary
FROM salary
GROUP BY month
ORDER BY month;



--3 Get the name and mobile number of users whose salaries are above 100 
--Note: in the salary table I've added salaries in thousands therefore above 100 will be above 1 lakh in this case.

UPDATE salary set  salary= replace(salary, ',','');    --removing the ',' from salaries 

SELECT
    e.first_name || ' ' || e.last_name AS full_name,
    e.Phone_Number, s.salary
FROM
    employee e 
JOIN
    salary s ON e.employee_id = s.employee_id
WHERE
    s.salary>100000 group by e.first_name || ' ' || e.last_name;



--4.1 Get the List of users who had an increment in salary over a period of 2 years.

SELECT 
    employee_id,
    MAX(CASE WHEN year = 2012 THEN annual_salary END) AS AnnualSalary_2012,
    MAX(CASE WHEN year = 2013 THEN annual_salary END) AS AnnualSalary_2013,
    MAX(CASE WHEN year = 2014 THEN annual_salary END) AS AnnualSalary_2014,
	MAX(CASE WHEN year = 2014 THEN annual_salary END) - MAX(CASE WHEN year = 2012 THEN annual_salary END)  as AnnualIncrement_In2years
FROM (
    SELECT
        employee_id,
        CAST(strftime('%Y', disbursement_date) AS INTEGER) AS year,
        SUM(salary) AS annual_salary
    FROM SALARY
    GROUP BY employee_id, year
) AS SalarySummary
GROUP BY employee_id
HAVING AnnualSalary_2014 > AnnualSalary_2012
ORDER BY employee_id;


--4.2 AVG increment for the all the employees.

SELECT AVG(AnnualIncrement_In2years) AS Average_Incement FROM (
SELECT 
    employee_id,
    MAX(CASE WHEN year = 2012 THEN annual_salary END) AS AnnualSalary_2012,
    MAX(CASE WHEN year = 2013 THEN annual_salary END) AS AnnualSalary_2013,
    MAX(CASE WHEN year = 2014 THEN annual_salary END) AS AnnualSalary_2014,
	MAX(CASE WHEN year = 2014 THEN annual_salary END) - MAX(CASE WHEN year = 2012 THEN annual_salary END)  as AnnualIncrement_In2years
FROM (
    SELECT
        employee_id,
        CAST(strftime('%Y', disbursement_date) AS INTEGER) AS year,
        SUM(salary) AS annual_salary
    FROM SALARY
    GROUP BY employee_id, year
) AS SalarySummary
GROUP BY employee_id
HAVING AnnualSalary_2014 > AnnualSalary_2012
ORDER BY employee_id);


--5 Average increment per year

SELECT AVG(AnnualSalary_2013) as increment_2013, AVG(AnnualSalary_2014) as increment_2014 FROM(
SELECT
    employee_id,
    MAX(CASE WHEN year = 2012 THEN annual_salary END) AS AnnualSalary_2012,
    MAX(CASE WHEN year = 2013 THEN annual_salary END) AS AnnualSalary_2013,
    MAX(CASE WHEN year = 2014 THEN annual_salary END) AS AnnualSalary_2014
FROM (
    SELECT
        employee_id,
        CAST(strftime('%Y', disbursement_date) AS INTEGER) AS year,
        SUM(CAST(REPLACE(salary, ',', '') AS INTEGER)) AS annual_salary
    FROM SALARY
    GROUP BY employee_id, year
) AS SalarySummary
GROUP BY employee_id
HAVING AnnualSalary_2014 > AnnualSalary_2012
ORDER BY employee_id
);


--5 is not correct, below is the correct query

SELECT AVG(Increment_2014) as Avg_increment_2014, AVG(Increment_2013) as Avg_increment_2013 FROM(
SELECT
    employee_id,
	MAX(CASE WHEN year = 2014 THEN annual_salary END) - MAX(CASE WHEN year = 2013 THEN annual_salary END)  as Increment_2014,
	MAX(CASE WHEN year = 2013 THEN annual_salary END) - MAX(CASE WHEN year = 2012 THEN annual_salary END)  as Increment_2013

FROM (
    SELECT
        employee_id,
        CAST(strftime('%Y', disbursement_date) AS INTEGER) AS year,
        SUM(salary) AS annual_salary
    FROM SALARY
    GROUP BY employee_id, year
) AS SalarySummary
GROUP BY employee_id 
ORDER BY employee_id
);

--Note: all the outoputs are in OutputData file. 